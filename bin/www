#!/usr/bin/env node

var app = require('../app');
// var debug = require('debug')('score:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
var io = require('socket.io')(server);

var userList = [];
var retList = [];

function avgr(s) {
  let ret = 0;
  for(i=0;i<s.length;i++) {
      ret += parseInt(s[i])
  }
  ret = parseInt( ret / s.length );
  return ret;
}

function exist(arr,uid) {

  for(i=0;i<arr.length;i++) {
    if (arr[i] === uid) {
      return true;
    }
  }
  return false;
}

io.on('connection', function(socket){
  console.log('a user connected');


  socket.on('disconnect', function(){
    console.log('user disconnected');
  });

  socket.on('init', function(){
    io.emit('init');
  });

  socket.on('login', function(msg){
    console.log('message: ' + msg);
    let obj = JSON.parse(msg)

    if (obj.pwd === 'a') {
      io.emit('login-succ',obj.usr);
      userList.push(obj.usr);
      log(userList);
    }else{
      io.emit('login-err');
    }
  });

  socket.on('start', function(uid){
    io.emit('start');
    log('start game...');
  });

  socket.on('mark', function(uid, arr){
    if (!exist(retList, uid)) {
      let avg = avgr(arr)
      arr.push(avg);
      retList.push({usr:uid, mark: avg});
      io.emit('mark', uid, arr );
      log(uid + '...' + arr );
    }
  });

  socket.on('result', function(){
    io.emit('result', retList);
    log('calu result...');
  });


  socket.on('close', function(uid){
    io.emit('close',uid);
    userList.splice(userList.indexOf(uid),1);
    log(userList);
  });
});





server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);
}


function log(msg) {
  console.log(msg);
}